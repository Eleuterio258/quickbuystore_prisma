
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.8.0
 * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
 */
Prisma.prismaVersion = {
  client: "4.8.0",
  engine: "d6e67a83f971b175a593ccc12e15c4a757f93ffe"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AddressesScalarFieldEnum = makeEnum({
  id: 'id',
  customerId: 'customerId',
  name: 'name',
  phone: 'phone',
  postalCode: 'postalCode',
  province: 'province',
  district: 'district',
  address: 'address',
  latitute: 'latitute',
  longitude: 'longitude',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.AdminsScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  name: 'name',
  phone: 'phone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CartsScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CategoriesScalarFieldEnum = makeEnum({
  id: 'id',
  shopId: 'shopId',
  name: 'name',
  description: 'description',
  image: 'image',
  icon: 'icon',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CustomersScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  phone: 'phone',
  midleName: 'midleName',
  firstName: 'firstName',
  lastName: 'lastName',
  online: 'online',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.DeliveriesScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  name: 'name',
  phone: 'phone',
  email: 'email',
  documentation: 'documentation',
  profileImage: 'profileImage',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ImagesScalarFieldEnum = makeEnum({
  id: 'id',
  productId: 'productId',
  name: 'name',
  path: 'path',
  size: 'size',
  type: 'type',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.OrderItemsScalarFieldEnum = makeEnum({
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  quantity: 'quantity',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.OrderShopsScalarFieldEnum = makeEnum({
  id: 'id',
  orderId: 'orderId',
  shopId: 'shopId',
  subTotal: 'subTotal',
  tax: 'tax',
  totalPrice: 'totalPrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.OrdersScalarFieldEnum = makeEnum({
  id: 'id',
  customerId: 'customerId',
  addressId: 'addressId',
  deliveryId: 'deliveryId',
  shopId: 'shopId',
  paymentType: 'paymentType',
  subTotal: 'subTotal',
  tax: 'tax',
  totalPrice: 'totalPrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProductsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  price: 'price',
  rating: 'rating',
  isNew: 'isNew',
  isHot: 'isHot',
  discount: 'discount',
  oldPrice: 'oldPrice',
  stock: 'stock',
  status: 'status',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.ShopsScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  name: 'name',
  phone: 'phone',
  logo: 'logo',
  email: 'email',
  description: 'description',
  latitute: 'latitute',
  longitude: 'longitude',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SlidersScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  image: 'image',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  fcmToken: 'fcmToken',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.WishlistsScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});
exports.ROLE = makeEnum({
  SHOP: 'SHOP',
  DELLIVERY: 'DELLIVERY',
  CUSTOMER: 'CUSTOMER',
  ADMIN: 'ADMIN'
});

exports.STATUS = makeEnum({
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  STOCKOUT: 'STOCKOUT'
});

exports.Prisma.ModelName = makeEnum({
  products: 'products',
  categories: 'categories',
  shops: 'shops',
  users: 'users',
  admins: 'admins',
  deliveries: 'deliveries',
  carts: 'carts',
  wishlists: 'wishlists',
  addresses: 'addresses',
  orders: 'orders',
  orderItems: 'orderItems',
  orderShops: 'orderShops',
  sliders: 'sliders',
  images: 'images',
  customers: 'customers'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
